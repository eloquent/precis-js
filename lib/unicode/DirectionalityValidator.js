// Generated by CoffeeScript 1.9.3
(function() {
  var DirectionalityValidator, InvalidDirectionalityError, Precis;

  InvalidDirectionalityError = require('../error/InvalidDirectionalityError');

  Precis = require('../constants');

  module.exports = DirectionalityValidator = (function() {
    function DirectionalityValidator(propertyReader) {
      this.propertyReader = propertyReader;
    }

    DirectionalityValidator.prototype.validate = function(codepoints) {
      var bidiClass, codepoint, direction, i, last, len, state;
      if (!codepoints.length) {
        return;
      }
      state = 0;
      direction = -1;
      last = -1;
      for (i = 0, len = codepoints.length; i < len; i++) {
        codepoint = codepoints[i];
        bidiClass = this.propertyReader.bidiClass(codepoint);
        if (bidiClass !== Precis.BIDI_CLASS.NSM) {
          last = bidiClass;
        }
        switch (state) {
          case 0:
            switch (bidiClass) {
              case Precis.BIDI_CLASS.L:
                direction = 0;
                state = 1;
                break;
              case Precis.BIDI_CLASS.R:
              case Precis.BIDI_CLASS.AL:
                direction = 1;
                state = 2;
                break;
              default:
                throw new InvalidDirectionalityError();
            }
            break;
          case 1:
            if (bidiClass !== Precis.BIDI_CLASS.L && bidiClass !== Precis.BIDI_CLASS.EN && bidiClass !== Precis.BIDI_CLASS.ES && bidiClass !== Precis.BIDI_CLASS.CS && bidiClass !== Precis.BIDI_CLASS.ET && bidiClass !== Precis.BIDI_CLASS.ON && bidiClass !== Precis.BIDI_CLASS.BN && bidiClass !== Precis.BIDI_CLASS.NSM) {
              throw new InvalidDirectionalityError();
            }
            break;
          case 2:
            if (bidiClass !== Precis.BIDI_CLASS.R && bidiClass !== Precis.BIDI_CLASS.AL && bidiClass !== Precis.BIDI_CLASS.AN && bidiClass !== Precis.BIDI_CLASS.EN && bidiClass !== Precis.BIDI_CLASS.ES && bidiClass !== Precis.BIDI_CLASS.CS && bidiClass !== Precis.BIDI_CLASS.ET && bidiClass !== Precis.BIDI_CLASS.ON && bidiClass !== Precis.BIDI_CLASS.BN && bidiClass !== Precis.BIDI_CLASS.NSM) {
              throw new InvalidDirectionalityError();
            }
            if (bidiClass === Precis.BIDI_CLASS.EN) {
              state = 3;
            }
            if (bidiClass === Precis.BIDI_CLASS.AN) {
              state = 4;
            }
            break;
          case 3:
            if (bidiClass !== Precis.BIDI_CLASS.R && bidiClass !== Precis.BIDI_CLASS.AL && bidiClass !== Precis.BIDI_CLASS.EN && bidiClass !== Precis.BIDI_CLASS.ES && bidiClass !== Precis.BIDI_CLASS.CS && bidiClass !== Precis.BIDI_CLASS.ET && bidiClass !== Precis.BIDI_CLASS.ON && bidiClass !== Precis.BIDI_CLASS.BN && bidiClass !== Precis.BIDI_CLASS.NSM) {
              throw new InvalidDirectionalityError();
            }
            break;
          case 4:
            if (bidiClass !== Precis.BIDI_CLASS.R && bidiClass !== Precis.BIDI_CLASS.AL && bidiClass !== Precis.BIDI_CLASS.AN && bidiClass !== Precis.BIDI_CLASS.ES && bidiClass !== Precis.BIDI_CLASS.CS && bidiClass !== Precis.BIDI_CLASS.ET && bidiClass !== Precis.BIDI_CLASS.ON && bidiClass !== Precis.BIDI_CLASS.BN && bidiClass !== Precis.BIDI_CLASS.NSM) {
              throw new InvalidDirectionalityError();
            }
        }
      }
      if (direction) {
        if (last !== Precis.BIDI_CLASS.R && last !== Precis.BIDI_CLASS.AL && last !== Precis.BIDI_CLASS.AN && last !== Precis.BIDI_CLASS.EN) {
          throw new InvalidDirectionalityError();
        }
      } else {
        if (last !== Precis.BIDI_CLASS.L && last !== Precis.BIDI_CLASS.EN) {
          throw new InvalidDirectionalityError();
        }
      }
    };

    return DirectionalityValidator;

  })();

}).call(this);
